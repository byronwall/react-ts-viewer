// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`buildScopeTree - AdvancedComponent (Fixture File) > should build a scope tree from a fixture file and match snapshot > AdvancedComponent 1`] = `
{
  "category": "Program",
  "children": [
    {
      "category": "SyntheticGroup",
      "children": [
        {
          "category": "TypeAlias",
          "children": [],
          "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:280-325",
          "kind": 265,
          "label": "type State [11]",
          "loc": {
            "end": {
              "column": 45,
              "line": 11,
            },
            "start": {
              "column": 0,
              "line": 11,
            },
          },
          "source": "type State = { count: number; text: string };",
          "value": 1,
        },
        {
          "category": "TypeAlias",
          "children": [],
          "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:326-402",
          "kind": 265,
          "label": "type Action [12]",
          "loc": {
            "end": {
              "column": 76,
              "line": 12,
            },
            "start": {
              "column": 0,
              "line": 12,
            },
          },
          "source": "type Action = { type: "INCREMENT" } | { type: "SET_TEXT"; payload: string };",
          "value": 1,
        },
        {
          "category": "Interface",
          "children": [
            {
              "category": "Other",
              "children": [],
              "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:783-806",
              "kind": 184,
              "label": "FunctionType [29]",
              "loc": {
                "end": {
                  "column": 36,
                  "line": 29,
                },
                "start": {
                  "column": 13,
                  "line": 29,
                },
              },
              "source": "(count: number) => void",
              "value": 1,
            },
          ],
          "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:721-809",
          "kind": 264,
          "label": "interface AdvancedComponentProps [27-30]",
          "loc": {
            "end": {
              "column": 1,
              "line": 30,
            },
            "start": {
              "column": 0,
              "line": 27,
            },
          },
          "source": "interface AdvancedComponentProps {
  id: string;
  onUpdate?: (count: number) => void;
}",
          "value": 2,
        },
      ],
      "id": "synthetic:/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:Type defs:/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:280-325",
      "kind": 0,
      "label": "Type defs",
      "loc": {
        "end": {
          "column": 45,
          "line": 11,
        },
        "start": {
          "column": 0,
          "line": 11,
        },
      },
      "meta": {
        "contains": 3,
        "originalNodesCategories": [
          "TypeAlias",
          "TypeAlias",
          "Interface",
        ],
        "syntheticGroup": true,
      },
      "source": "type State = { count: number; text: string };

type Action = { type: "INCREMENT" } | { type: "SET_TEXT"; payload: string };

interface AdvancedComponentProps {
  id: string;
  onUpdate?: (count: number) => void;
}",
      "value": 5,
    },
    {
      "category": "Function",
      "children": [
        {
          "category": "ReactHook",
          "children": [
            {
              "category": "ArrowFunction",
              "children": [
                {
                  "category": "Call",
                  "children": [],
                  "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:153-192",
                  "kind": 213,
                  "label": "console.log [6]",
                  "loc": {
                    "end": {
                      "column": 43,
                      "line": 6,
                    },
                    "start": {
                      "column": 4,
                      "line": 6,
                    },
                  },
                  "source": "console.log(\`\${componentName} mounted\`)",
                  "value": 1,
                },
                {
                  "category": "ReturnStatement",
                  "children": [
                    {
                      "category": "ArrowFunction",
                      "children": [
                        {
                          "category": "Call",
                          "children": [],
                          "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:211-252",
                          "kind": 213,
                          "label": "console.log [7]",
                          "loc": {
                            "end": {
                              "column": 58,
                              "line": 7,
                            },
                            "start": {
                              "column": 17,
                              "line": 7,
                            },
                          },
                          "source": "console.log(\`\${componentName} unmounted\`)",
                          "value": 1,
                        },
                      ],
                      "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:205-252",
                      "kind": 219,
                      "label": "() => {} [7]",
                      "loc": {
                        "end": {
                          "column": 58,
                          "line": 7,
                        },
                        "start": {
                          "column": 11,
                          "line": 7,
                        },
                      },
                      "meta": {
                        "call": "console.log [7]",
                        "collapsed": "arrowFunction",
                        "originalCategory": "ArrowFunction",
                      },
                      "source": "() => console.log(\`\${componentName} unmounted\`)",
                      "value": 2,
                    },
                  ],
                  "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:198-253",
                  "kind": 253,
                  "label": "return () => console.log(\`\${component... [7]",
                  "loc": {
                    "end": {
                      "column": 59,
                      "line": 7,
                    },
                    "start": {
                      "column": 4,
                      "line": 7,
                    },
                  },
                  "source": "return () => console.log(\`\${componentName} unmounted\`);",
                  "value": 3,
                },
              ],
              "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:141-257",
              "kind": 219,
              "label": "() => {} [5-8]",
              "loc": {
                "end": {
                  "column": 3,
                  "line": 8,
                },
                "start": {
                  "column": 12,
                  "line": 5,
                },
              },
              "source": "() => {
    console.log(\`\${componentName} mounted\`);
    return () => console.log(\`\${componentName} unmounted\`);
  }",
              "value": 5,
            },
          ],
          "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:131-275",
          "kind": 213,
          "label": "useEffect [5-8]",
          "loc": {
            "end": {
              "column": 21,
              "line": 8,
            },
            "start": {
              "column": 2,
              "line": 5,
            },
          },
          "meta": {
            "hookName": "useEffect",
          },
          "source": "useEffect(() => {
    console.log(\`\${componentName} mounted\`);
    return () => console.log(\`\${componentName} unmounted\`);
  }, [componentName])",
          "value": 6,
        },
      ],
      "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:85-278",
      "kind": 262,
      "label": "useLogger() [4-9]",
      "loc": {
        "end": {
          "column": 1,
          "line": 9,
        },
        "start": {
          "column": 0,
          "line": 4,
        },
      },
      "source": "function useLogger(componentName: string) {
  useEffect(() => {
    console.log(\`\${componentName} mounted\`);
    return () => console.log(\`\${componentName} unmounted\`);
  }, [componentName]);
}",
      "value": 7,
    },
    {
      "category": "Variable",
      "children": [],
      "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:410-454",
      "kind": 260,
      "label": "initialState [14]",
      "loc": {
        "end": {
          "column": 50,
          "line": 14,
        },
        "start": {
          "column": 6,
          "line": 14,
        },
      },
      "meta": {
        "initializer": "{ count: 0, text: "" }",
      },
      "source": "initialState: State = { count: 0, text: "" }",
      "value": 1,
    },
    {
      "category": "Function",
      "children": [
        {
          "category": "ControlFlow",
          "children": [
            {
              "category": "ControlFlow",
              "children": [
                {
                  "category": "ReturnStatement",
                  "children": [],
                  "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:566-610",
                  "kind": 253,
                  "label": "return { ...state, count: state.count... [19]",
                  "loc": {
                    "end": {
                      "column": 50,
                      "line": 19,
                    },
                    "start": {
                      "column": 6,
                      "line": 19,
                    },
                  },
                  "source": "return { ...state, count: state.count + 1 };",
                  "value": 1,
                },
              ],
              "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:542-610",
              "kind": 296,
              "label": "case "INCREMENT" [18-19]",
              "loc": {
                "end": {
                  "column": 50,
                  "line": 19,
                },
                "start": {
                  "column": 4,
                  "line": 18,
                },
              },
              "source": "case "INCREMENT":
      return { ...state, count: state.count + 1 };",
              "value": 2,
            },
            {
              "category": "ControlFlow",
              "children": [
                {
                  "category": "ReturnStatement",
                  "children": [],
                  "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:638-680",
                  "kind": 253,
                  "label": "return { ...state, text: action.paylo... [21]",
                  "loc": {
                    "end": {
                      "column": 48,
                      "line": 21,
                    },
                    "start": {
                      "column": 6,
                      "line": 21,
                    },
                  },
                  "source": "return { ...state, text: action.payload };",
                  "value": 1,
                },
              ],
              "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:615-680",
              "kind": 296,
              "label": "case "SET_TEXT" [20-21]",
              "loc": {
                "end": {
                  "column": 48,
                  "line": 21,
                },
                "start": {
                  "column": 4,
                  "line": 20,
                },
              },
              "source": "case "SET_TEXT":
      return { ...state, text: action.payload };",
              "value": 2,
            },
            {
              "category": "ControlFlow",
              "children": [
                {
                  "category": "ReturnStatement",
                  "children": [],
                  "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:700-713",
                  "kind": 253,
                  "label": "return state [23]",
                  "loc": {
                    "end": {
                      "column": 19,
                      "line": 23,
                    },
                    "start": {
                      "column": 6,
                      "line": 23,
                    },
                  },
                  "source": "return state;",
                  "value": 1,
                },
              ],
              "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:685-713",
              "kind": 297,
              "label": "default [22-23]",
              "loc": {
                "end": {
                  "column": 19,
                  "line": 23,
                },
                "start": {
                  "column": 4,
                  "line": 22,
                },
              },
              "source": "default:
      return state;",
              "value": 2,
            },
          ],
          "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:515-717",
          "kind": 255,
          "label": "switch [17-24]",
          "loc": {
            "end": {
              "column": 3,
              "line": 24,
            },
            "start": {
              "column": 2,
              "line": 17,
            },
          },
          "source": "switch (action.type) {
    case "INCREMENT":
      return { ...state, count: state.count + 1 };
    case "SET_TEXT":
      return { ...state, text: action.payload };
    default:
      return state;
  }",
          "value": 7,
        },
      ],
      "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:457-719",
      "kind": 262,
      "label": "reducer() [16-25]",
      "loc": {
        "end": {
          "column": 1,
          "line": 25,
        },
        "start": {
          "column": 0,
          "line": 16,
        },
      },
      "source": "function reducer(state: State, action: Action): State {
  switch (action.type) {
    case "INCREMENT":
      return { ...state, count: state.count + 1 };
    case "SET_TEXT":
      return { ...state, text: action.payload };
    default:
      return state;
  }
}",
      "value": 8,
    },
    {
      "category": "Variable",
      "children": [
        {
          "category": "ArrowFunction",
          "children": [
            {
              "category": "ReactHook",
              "children": [],
              "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:902-938",
              "kind": 213,
              "label": "useLogger [36]",
              "loc": {
                "end": {
                  "column": 38,
                  "line": 36,
                },
                "start": {
                  "column": 2,
                  "line": 36,
                },
              },
              "meta": {
                "hookName": "useLogger",
              },
              "source": "useLogger(\`AdvancedComponent-\${id}\`)",
              "value": 1,
            },
            {
              "category": "Variable",
              "children": [
                {
                  "category": "ReactHook",
                  "children": [],
                  "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:968-1001",
                  "kind": 213,
                  "label": "useReducer [37]",
                  "loc": {
                    "end": {
                      "column": 61,
                      "line": 37,
                    },
                    "start": {
                      "column": 28,
                      "line": 37,
                    },
                  },
                  "meta": {
                    "hookName": "useReducer",
                  },
                  "source": "useReducer(reducer, initialState)",
                  "value": 1,
                },
              ],
              "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:948-1001",
              "kind": 260,
              "label": "[state, dispatch] [37]",
              "loc": {
                "end": {
                  "column": 61,
                  "line": 37,
                },
                "start": {
                  "column": 8,
                  "line": 37,
                },
              },
              "meta": {
                "initializer": "useReducer(reducer, initialState)",
              },
              "source": "[state, dispatch] = useReducer(reducer, initialState)",
              "value": 2,
            },
            {
              "category": "Variable",
              "children": [
                {
                  "category": "ReactHook",
                  "children": [
                    {
                      "category": "ArrowFunction",
                      "children": [
                        {
                          "category": "Call",
                          "children": [],
                          "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:1054-1085",
                          "kind": 213,
                          "label": "dispatch [40]",
                          "loc": {
                            "end": {
                              "column": 35,
                              "line": 40,
                            },
                            "start": {
                              "column": 4,
                              "line": 40,
                            },
                          },
                          "source": "dispatch({ type: "INCREMENT" })",
                          "value": 1,
                        },
                        {
                          "category": "IfClause",
                          "children": [
                            {
                              "category": "Call",
                              "children": [],
                              "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:1113-1138",
                              "kind": 213,
                              "label": "onUpdate [42]",
                              "loc": {
                                "end": {
                                  "column": 31,
                                  "line": 42,
                                },
                                "start": {
                                  "column": 6,
                                  "line": 42,
                                },
                              },
                              "source": "onUpdate(state.count + 1)",
                              "value": 1,
                            },
                          ],
                          "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:1091-1145",
                          "kind": 245,
                          "label": "if (onUpdate)",
                          "loc": {
                            "end": {
                              "column": 5,
                              "line": 43,
                            },
                            "start": {
                              "column": 4,
                              "line": 41,
                            },
                          },
                          "meta": {
                            "condition": "onUpdate",
                          },
                          "source": "if (onUpdate) {
      onUpdate(state.count + 1);
    }",
                          "value": 2,
                        },
                      ],
                      "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:1042-1149",
                      "kind": 219,
                      "label": "() => {} [39-44]",
                      "loc": {
                        "end": {
                          "column": 3,
                          "line": 44,
                        },
                        "start": {
                          "column": 38,
                          "line": 39,
                        },
                      },
                      "source": "() => {
    dispatch({ type: "INCREMENT" });
    if (onUpdate) {
      onUpdate(state.count + 1);
    }
  }",
                      "value": 4,
                    },
                  ],
                  "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:1030-1175",
                  "kind": 213,
                  "label": "useCallback [39-44]",
                  "loc": {
                    "end": {
                      "column": 29,
                      "line": 44,
                    },
                    "start": {
                      "column": 26,
                      "line": 39,
                    },
                  },
                  "meta": {
                    "hookName": "useCallback",
                  },
                  "source": "useCallback(() => {
    dispatch({ type: "INCREMENT" });
    if (onUpdate) {
      onUpdate(state.count + 1);
    }
  }, [state.count, onUpdate])",
                  "value": 5,
                },
              ],
              "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:1012-1175",
              "kind": 260,
              "label": "handleIncrement [39-44]",
              "loc": {
                "end": {
                  "column": 29,
                  "line": 44,
                },
                "start": {
                  "column": 8,
                  "line": 39,
                },
              },
              "meta": {
                "initializer": "useCallback(() => {
    dispatch({ type: "INCREMENT" });
    if (onUpdate) {
      onUpdate(state.count + 1);
    }
  }, [state.count, onUpdate])",
              },
              "source": "handleIncrement = useCallback(() => {
    dispatch({ type: "INCREMENT" });
    if (onUpdate) {
      onUpdate(state.count + 1);
    }
  }, [state.count, onUpdate])",
              "value": 6,
            },
            {
              "category": "Variable",
              "children": [
                {
                  "category": "ArrowFunction",
                  "children": [
                    {
                      "category": "Call",
                      "children": [],
                      "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:1259-1318",
                      "kind": 213,
                      "label": "dispatch [47]",
                      "loc": {
                        "end": {
                          "column": 63,
                          "line": 47,
                        },
                        "start": {
                          "column": 4,
                          "line": 47,
                        },
                      },
                      "source": "dispatch({ type: "SET_TEXT", payload: event.target.value })",
                      "value": 1,
                    },
                  ],
                  "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:1205-1323",
                  "kind": 219,
                  "label": "() => {} [46-48]",
                  "loc": {
                    "end": {
                      "column": 3,
                      "line": 48,
                    },
                    "start": {
                      "column": 27,
                      "line": 46,
                    },
                  },
                  "meta": {
                    "call": "dispatch [47]",
                    "collapsed": "arrowFunction",
                    "originalCategory": "ArrowFunction",
                  },
                  "source": "(event: React.ChangeEvent<HTMLInputElement>) => {
    dispatch({ type: "SET_TEXT", payload: event.target.value });
  }",
                  "value": 2,
                },
              ],
              "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:1186-1323",
              "kind": 260,
              "label": "handleTextChange [46-48]",
              "loc": {
                "end": {
                  "column": 3,
                  "line": 48,
                },
                "start": {
                  "column": 8,
                  "line": 46,
                },
              },
              "meta": {
                "initializer": "(event: React.ChangeEvent<HTMLInputElement>) => {
    dispatch({ type: "SET_TEXT", payload: event.target.value });
  }",
              },
              "source": "handleTextChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    dispatch({ type: "SET_TEXT", payload: event.target.value });
  }",
              "value": 3,
            },
            {
              "category": "Function",
              "children": [
                {
                  "category": "IfClause",
                  "children": [
                    {
                      "category": "ReturnStatement",
                      "children": [],
                      "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:1479-1496",
                      "kind": 253,
                      "label": "return value * 2 [53]",
                      "loc": {
                        "end": {
                          "column": 23,
                          "line": 53,
                        },
                        "start": {
                          "column": 6,
                          "line": 53,
                        },
                      },
                      "source": "return value * 2;",
                      "value": 1,
                    },
                  ],
                  "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:1450-1502",
                  "kind": 245,
                  "label": "if (value % 2 === 0)",
                  "loc": {
                    "end": {
                      "column": 5,
                      "line": 54,
                    },
                    "start": {
                      "column": 4,
                      "line": 52,
                    },
                  },
                  "meta": {
                    "condition": "value % 2 === 0",
                  },
                  "source": "if (value % 2 === 0) {
      return value * 2;
    }",
                  "value": 2,
                },
                {
                  "category": "ReturnStatement",
                  "children": [],
                  "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:1507-1524",
                  "kind": 253,
                  "label": "return value * 3 [55]",
                  "loc": {
                    "end": {
                      "column": 21,
                      "line": 55,
                    },
                    "start": {
                      "column": 4,
                      "line": 55,
                    },
                  },
                  "source": "return value * 3;",
                  "value": 1,
                },
              ],
              "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:1404-1528",
              "kind": 262,
              "label": "utilityFunction() [51-56]",
              "loc": {
                "end": {
                  "column": 3,
                  "line": 56,
                },
                "start": {
                  "column": 2,
                  "line": 51,
                },
              },
              "source": "function utilityFunction(value: number) {
    if (value % 2 === 0) {
      return value * 2;
    }
    return value * 3;
  }",
              "value": 4,
            },
            {
              "category": "ReactHook",
              "children": [
                {
                  "category": "ArrowFunction",
                  "children": [
                    {
                      "category": "Variable",
                      "children": [
                        {
                          "category": "Call",
                          "children": [],
                          "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:1569-1597",
                          "kind": 213,
                          "label": "utilityFunction [59]",
                          "loc": {
                            "end": {
                              "column": 47,
                              "line": 59,
                            },
                            "start": {
                              "column": 19,
                              "line": 59,
                            },
                          },
                          "source": "utilityFunction(state.count)",
                          "value": 1,
                        },
                      ],
                      "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:1560-1597",
                      "kind": 260,
                      "label": "result [59]",
                      "loc": {
                        "end": {
                          "column": 47,
                          "line": 59,
                        },
                        "start": {
                          "column": 10,
                          "line": 59,
                        },
                      },
                      "meta": {
                        "initializer": "utilityFunction(state.count)",
                      },
                      "source": "result = utilityFunction(state.count)",
                      "value": 2,
                    },
                    {
                      "category": "Call",
                      "children": [],
                      "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:1603-1650",
                      "kind": 213,
                      "label": "console.log [60]",
                      "loc": {
                        "end": {
                          "column": 51,
                          "line": 60,
                        },
                        "start": {
                          "column": 4,
                          "line": 60,
                        },
                      },
                      "source": "console.log("Utility function result:", result)",
                      "value": 1,
                    },
                  ],
                  "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:1542-1655",
                  "kind": 219,
                  "label": "() => {} [58-61]",
                  "loc": {
                    "end": {
                      "column": 3,
                      "line": 61,
                    },
                    "start": {
                      "column": 12,
                      "line": 58,
                    },
                  },
                  "source": "() => {
    const result = utilityFunction(state.count);
    console.log("Utility function result:", result);
  }",
                  "value": 4,
                },
              ],
              "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:1532-1671",
              "kind": 213,
              "label": "useEffect [58-61]",
              "loc": {
                "end": {
                  "column": 19,
                  "line": 61,
                },
                "start": {
                  "column": 2,
                  "line": 58,
                },
              },
              "meta": {
                "hookName": "useEffect",
              },
              "source": "useEffect(() => {
    const result = utilityFunction(state.count);
    console.log("Utility function result:", result);
  }, [state.count])",
              "value": 5,
            },
            {
              "category": "ReturnStatement",
              "children": [
                {
                  "category": "JSXElementDOM",
                  "children": [
                    {
                      "category": "JSXElementDOM",
                      "children": [],
                      "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:1760-1794",
                      "kind": 284,
                      "label": "<h2> [65]",
                      "loc": {
                        "end": {
                          "column": 40,
                          "line": 65,
                        },
                        "start": {
                          "column": 6,
                          "line": 65,
                        },
                      },
                      "source": "<h2>Advanced Component ({id})</h2>",
                      "value": 1,
                    },
                    {
                      "category": "JSXElementDOM",
                      "children": [],
                      "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:1801-1836",
                      "kind": 284,
                      "label": "<p> [66]",
                      "loc": {
                        "end": {
                          "column": 41,
                          "line": 66,
                        },
                        "start": {
                          "column": 6,
                          "line": 66,
                        },
                      },
                      "source": "<p>Current Count: {state.count}</p>",
                      "value": 1,
                    },
                    {
                      "category": "JSXElementDOM",
                      "children": [],
                      "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:1843-1974",
                      "kind": 285,
                      "label": "<input> [67-72]",
                      "loc": {
                        "end": {
                          "column": 8,
                          "line": 72,
                        },
                        "start": {
                          "column": 6,
                          "line": 67,
                        },
                      },
                      "source": "<input
        type="text"
        value={state.text}
        onChange={handleTextChange}
        placeholder="Enter text"
      />",
                      "value": 1,
                    },
                    {
                      "category": "JSXElementDOM",
                      "children": [],
                      "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:1981-2014",
                      "kind": 284,
                      "label": "<p> [73]",
                      "loc": {
                        "end": {
                          "column": 39,
                          "line": 73,
                        },
                        "start": {
                          "column": 6,
                          "line": 73,
                        },
                      },
                      "source": "<p>Current Text: {state.text}</p>",
                      "value": 1,
                    },
                    {
                      "category": "JSXElementDOM",
                      "children": [],
                      "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:2021-2073",
                      "kind": 284,
                      "label": "<button> [74]",
                      "loc": {
                        "end": {
                          "column": 58,
                          "line": 74,
                        },
                        "start": {
                          "column": 6,
                          "line": 74,
                        },
                      },
                      "source": "<button onClick={handleIncrement}>Increment</button>",
                      "value": 1,
                    },
                    {
                      "category": "JSXElementDOM",
                      "children": [],
                      "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:2110-2168",
                      "kind": 284,
                      "label": "<p> [76]",
                      "loc": {
                        "end": {
                          "column": 66,
                          "line": 76,
                        },
                        "start": {
                          "column": 8,
                          "line": 76,
                        },
                      },
                      "source": "<p style={{ color: "green" }}>Count is greater than 5!</p>",
                      "value": 1,
                    },
                    {
                      "category": "Call",
                      "children": [
                        {
                          "category": "ArrowFunction",
                          "children": [
                            {
                              "category": "IfClause",
                              "children": [
                                {
                                  "category": "ReturnStatement",
                                  "children": [
                                    {
                                      "category": "JSXElementDOM",
                                      "children": [
                                        {
                                          "category": "Call",
                                          "children": [],
                                          "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:2313-2337",
                                          "kind": 213,
                                          "label": "state.text.toUpperCase [81]",
                                          "loc": {
                                            "end": {
                                              "column": 58,
                                              "line": 81,
                                            },
                                            "start": {
                                              "column": 34,
                                              "line": 81,
                                            },
                                          },
                                          "source": "state.text.toUpperCase()",
                                          "value": 1,
                                        },
                                      ],
                                      "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:2296-2342",
                                      "kind": 284,
                                      "label": "<p> [81]",
                                      "loc": {
                                        "end": {
                                          "column": 63,
                                          "line": 81,
                                        },
                                        "start": {
                                          "column": 17,
                                          "line": 81,
                                        },
                                      },
                                      "source": "<p>You entered: {state.text.toUpperCase()}</p>",
                                      "value": 2,
                                    },
                                  ],
                                  "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:2289-2343",
                                  "kind": 253,
                                  "label": "return <p>You entered: {state.text.to... [81]",
                                  "loc": {
                                    "end": {
                                      "column": 64,
                                      "line": 81,
                                    },
                                    "start": {
                                      "column": 10,
                                      "line": 81,
                                    },
                                  },
                                  "source": "return <p>You entered: {state.text.toUpperCase()}</p>;",
                                  "value": 3,
                                },
                              ],
                              "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:2250-2353",
                              "kind": 245,
                              "label": "if (state.text.length > 0)",
                              "loc": {
                                "end": {
                                  "column": 9,
                                  "line": 82,
                                },
                                "start": {
                                  "column": 8,
                                  "line": 80,
                                },
                              },
                              "meta": {
                                "condition": "state.text.length > 0",
                              },
                              "source": "if (state.text.length > 0) {
          return <p>You entered: {state.text.toUpperCase()}</p>;
        }",
                              "value": 4,
                            },
                            {
                              "category": "ReturnStatement",
                              "children": [],
                              "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:2362-2374",
                              "kind": 253,
                              "label": "return null [83]",
                              "loc": {
                                "end": {
                                  "column": 20,
                                  "line": 83,
                                },
                                "start": {
                                  "column": 8,
                                  "line": 83,
                                },
                              },
                              "source": "return null;",
                              "value": 1,
                            },
                          ],
                          "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:2186-2382",
                          "kind": 219,
                          "label": "() => {} [78-84]",
                          "loc": {
                            "end": {
                              "column": 7,
                              "line": 84,
                            },
                            "start": {
                              "column": 8,
                              "line": 78,
                            },
                          },
                          "source": "() => {
        // IIFE for conditional rendering logic
        if (state.text.length > 0) {
          return <p>You entered: {state.text.toUpperCase()}</p>;
        }
        return null;
      }",
                          "value": 6,
                        },
                      ],
                      "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:2185-2385",
                      "kind": 213,
                      "label": "(() => { [78-84]",
                      "loc": {
                        "end": {
                          "column": 10,
                          "line": 84,
                        },
                        "start": {
                          "column": 7,
                          "line": 78,
                        },
                      },
                      "source": "(() => {
        // IIFE for conditional rendering logic
        if (state.text.length > 0) {
          return <p>You entered: {state.text.toUpperCase()}</p>;
        }
        return null;
      })()",
                      "value": 7,
                    },
                  ],
                  "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:1689-2397",
                  "kind": 284,
                  "label": "<div> [64-85]",
                  "loc": {
                    "end": {
                      "column": 10,
                      "line": 85,
                    },
                    "start": {
                      "column": 4,
                      "line": 64,
                    },
                  },
                  "source": "<div className={\`advanced-component advanced-component--\${id}\`}>
      <h2>Advanced Component ({id})</h2>
      <p>Current Count: {state.count}</p>
      <input
        type="text"
        value={state.text}
        onChange={handleTextChange}
        placeholder="Enter text"
      />
      <p>Current Text: {state.text}</p>
      <button onClick={handleIncrement}>Increment</button>
      {state.count > 5 && (
        <p style={{ color: "green" }}>Count is greater than 5!</p>
      )}
      {(() => {
        // IIFE for conditional rendering logic
        if (state.text.length > 0) {
          return <p>You entered: {state.text.toUpperCase()}</p>;
        }
        return null;
      })()}
    </div>",
                  "value": 14,
                },
              ],
              "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:1676-2402",
              "kind": 253,
              "label": "return (
    <div className={\`advance... [63-86]",
              "loc": {
                "end": {
                  "column": 4,
                  "line": 86,
                },
                "start": {
                  "column": 2,
                  "line": 63,
                },
              },
              "source": "return (
    <div className={\`advanced-component advanced-component--\${id}\`}>
      <h2>Advanced Component ({id})</h2>
      <p>Current Count: {state.count}</p>
      <input
        type="text"
        value={state.text}
        onChange={handleTextChange}
        placeholder="Enter text"
      />
      <p>Current Text: {state.text}</p>
      <button onClick={handleIncrement}>Increment</button>
      {state.count > 5 && (
        <p style={{ color: "green" }}>Count is greater than 5!</p>
      )}
      {(() => {
        // IIFE for conditional rendering logic
        if (state.text.length > 0) {
          return <p>You entered: {state.text.toUpperCase()}</p>;
        }
        return null;
      })()}
    </div>
  );",
              "value": 15,
            },
          ],
          "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:871-2404",
          "kind": 219,
          "label": "() => {} [32-87]",
          "loc": {
            "end": {
              "column": 1,
              "line": 87,
            },
            "start": {
              "column": 60,
              "line": 32,
            },
          },
          "source": "({
  id,
  onUpdate,
}) => {
  useLogger(\`AdvancedComponent-\${id}\`);
  const [state, dispatch] = useReducer(reducer, initialState);

  const handleIncrement = useCallback(() => {
    dispatch({ type: "INCREMENT" });
    if (onUpdate) {
      onUpdate(state.count + 1);
    }
  }, [state.count, onUpdate]);

  const handleTextChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    dispatch({ type: "SET_TEXT", payload: event.target.value });
  };

  // Example of a nested function not necessarily a React component or hook
  function utilityFunction(value: number) {
    if (value % 2 === 0) {
      return value * 2;
    }
    return value * 3;
  }

  useEffect(() => {
    const result = utilityFunction(state.count);
    console.log("Utility function result:", result);
  }, [state.count]);

  return (
    <div className={\`advanced-component advanced-component--\${id}\`}>
      <h2>Advanced Component ({id})</h2>
      <p>Current Count: {state.count}</p>
      <input
        type="text"
        value={state.text}
        onChange={handleTextChange}
        placeholder="Enter text"
      />
      <p>Current Text: {state.text}</p>
      <button onClick={handleIncrement}>Increment</button>
      {state.count > 5 && (
        <p style={{ color: "green" }}>Count is greater than 5!</p>
      )}
      {(() => {
        // IIFE for conditional rendering logic
        if (state.text.length > 0) {
          return <p>You entered: {state.text.toUpperCase()}</p>;
        }
        return null;
      })()}
    </div>
  );
}",
          "value": 37,
        },
      ],
      "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:817-2404",
      "kind": 260,
      "label": "AdvancedComponent [32-87]",
      "loc": {
        "end": {
          "column": 1,
          "line": 87,
        },
        "start": {
          "column": 6,
          "line": 32,
        },
      },
      "meta": {
        "initializer": "({
  id,
  onUpdate,
}) => {
  useLogger(\`AdvancedComponent-\${id}\`);
  const [state, dispatch] = useReducer(reducer, initialState);

  const handleIncrement = useCallback(() => {
    dispatch({ type: "INCREMENT" });
    if (onUpdate) {
      onUpdate(state.count + 1);
    }
  }, [state.count, onUpdate]);

  const handleTextChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    dispatch({ type: "SET_TEXT", payload: event.target.value });
  };

  // Example of a nested function not necessarily a React component or hook
  function utilityFunction(value: number) {
    if (value % 2 === 0) {
      return value * 2;
    }
    return value * 3;
  }

  useEffect(() => {
    const result = utilityFunction(state.count);
    console.log("Utility function result:", result);
  }, [state.count]);

  return (
    <div className={\`advanced-component advanced-component--\${id}\`}>
      <h2>Advanced Component ({id})</h2>
      <p>Current Count: {state.count}</p>
      <input
        type="text"
        value={state.text}
        onChange={handleTextChange}
        placeholder="Enter text"
      />
      <p>Current Text: {state.text}</p>
      <button onClick={handleIncrement}>Increment</button>
      {state.count > 5 && (
        <p style={{ color: "green" }}>Count is greater than 5!</p>
      )}
      {(() => {
        // IIFE for conditional rendering logic
        if (state.text.length > 0) {
          return <p>You entered: {state.text.toUpperCase()}</p>;
        }
        return null;
      })()}
    </div>
  );
}",
      },
      "source": "AdvancedComponent: React.FC<AdvancedComponentProps> = ({
  id,
  onUpdate,
}) => {
  useLogger(\`AdvancedComponent-\${id}\`);
  const [state, dispatch] = useReducer(reducer, initialState);

  const handleIncrement = useCallback(() => {
    dispatch({ type: "INCREMENT" });
    if (onUpdate) {
      onUpdate(state.count + 1);
    }
  }, [state.count, onUpdate]);

  const handleTextChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    dispatch({ type: "SET_TEXT", payload: event.target.value });
  };

  // Example of a nested function not necessarily a React component or hook
  function utilityFunction(value: number) {
    if (value % 2 === 0) {
      return value * 2;
    }
    return value * 3;
  }

  useEffect(() => {
    const result = utilityFunction(state.count);
    console.log("Utility function result:", result);
  }, [state.count]);

  return (
    <div className={\`advanced-component advanced-component--\${id}\`}>
      <h2>Advanced Component ({id})</h2>
      <p>Current Count: {state.count}</p>
      <input
        type="text"
        value={state.text}
        onChange={handleTextChange}
        placeholder="Enter text"
      />
      <p>Current Text: {state.text}</p>
      <button onClick={handleIncrement}>Increment</button>
      {state.count > 5 && (
        <p style={{ color: "green" }}>Count is greater than 5!</p>
      )}
      {(() => {
        // IIFE for conditional rendering logic
        if (state.text.length > 0) {
          return <p>You entered: {state.text.toUpperCase()}</p>;
        }
        return null;
      })()}
    </div>
  );
}",
      "value": 38,
    },
    {
      "category": "Import",
      "children": [],
      "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx:0-66",
      "kind": 272,
      "label": "react [1]",
      "loc": {
        "end": {
          "column": 66,
          "line": 1,
        },
        "start": {
          "column": 0,
          "line": 1,
        },
      },
      "source": "import React, { useEffect, useCallback, useReducer } from "react";",
      "value": 1,
    },
  ],
  "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/AdvancedComponent.tsx",
  "kind": 307,
  "label": "AdvancedComponent.tsx",
  "loc": {
    "end": {
      "column": 0,
      "line": 91,
    },
    "start": {
      "column": 0,
      "line": 1,
    },
  },
  "source": "import React, { useEffect, useCallback, useReducer } from "react";

// A custom hook
function useLogger(componentName: string) {
  useEffect(() => {
    console.log(\`\${componentName} mounted\`);
    return () => console.log(\`\${componentName} unmounted\`);
  }, [componentName]);
}

type State = { count: number; text: string };
type Action = { type: "INCREMENT" } | { type: "SET_TEXT"; payload: string };

const initialState: State = { count: 0, text: "" };

function reducer(state: State, action: Action): State {
  switch (action.type) {
    case "INCREMENT":
      return { ...state, count: state.count + 1 };
    case "SET_TEXT":
      return { ...state, text: action.payload };
    default:
      return state;
  }
}

interface AdvancedComponentProps {
  id: string;
  onUpdate?: (count: number) => void;
}

const AdvancedComponent: React.FC<AdvancedComponentProps> = ({
  id,
  onUpdate,
}) => {
  useLogger(\`AdvancedComponent-\${id}\`);
  const [state, dispatch] = useReducer(reducer, initialState);

  const handleIncrement = useCallback(() => {
    dispatch({ type: "INCREMENT" });
    if (onUpdate) {
      onUpdate(state.count + 1);
    }
  }, [state.count, onUpdate]);

  const handleTextChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    dispatch({ type: "SET_TEXT", payload: event.target.value });
  };

  // Example of a nested function not necessarily a React component or hook
  function utilityFunction(value: number) {
    if (value % 2 === 0) {
      return value * 2;
    }
    return value * 3;
  }

  useEffect(() => {
    const result = utilityFunction(state.count);
    console.log("Utility function result:", result);
  }, [state.count]);

  return (
    <div className={\`advanced-component advanced-component--\${id}\`}>
      <h2>Advanced Component ({id})</h2>
      <p>Current Count: {state.count}</p>
      <input
        type="text"
        value={state.text}
        onChange={handleTextChange}
        placeholder="Enter text"
      />
      <p>Current Text: {state.text}</p>
      <button onClick={handleIncrement}>Increment</button>
      {state.count > 5 && (
        <p style={{ color: "green" }}>Count is greater than 5!</p>
      )}
      {(() => {
        // IIFE for conditional rendering logic
        if (state.text.length > 0) {
          return <p>You entered: {state.text.toUpperCase()}</p>;
        }
        return null;
      })()}
    </div>
  );
};

export { AdvancedComponent, useLogger };
export default AdvancedComponent;
",
  "value": 61,
}
`;
