// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`buildSemanticReferenceGraph > should build a semantic graph 1`] = `
[
  {
    "direction": "outgoing",
    "isInternal": false,
    "name": "useCallback",
    "offset": 436,
    "position": {
      "character": 24,
      "line": 17,
    },
    "sourceNodeId": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:421-695",
    "targetNodeId": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:15-72",
    "targets": [
      "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:421-695",
    ],
    "type": "function_call",
    "usageNodeId": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:421-695",
  },
  {
    "direction": "outgoing",
    "isInternal": false,
    "name": "keysToTrack",
    "offset": 492,
    "position": {
      "character": 11,
      "line": 19,
    },
    "sourceNodeId": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:421-695",
    "targetNodeId": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:264-2102",
    "targets": [
      "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:421-695",
    ],
    "type": "variable_reference",
    "usageNodeId": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:488-666",
  },
  {
    "direction": "outgoing",
    "isInternal": false,
    "name": "setPressedModifiers",
    "offset": 541,
    "position": {
      "character": 60,
      "line": 19,
    },
    "sourceNodeId": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:421-695",
    "targetNodeId": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:329-410",
    "targets": [
      "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:421-695",
    ],
    "type": "function_call",
    "usageNodeId": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:488-666",
  },
]
`;

exports[`buildSemanticReferenceGraph > should build a semantic graph 2`] = `
[
  {
    "category": "Variable",
    "children": [
      {
        "category": "ReactHook",
        "children": [
          {
            "category": "ArrowFunction",
            "children": [
              {
                "category": "IfClause",
                "children": [
                  {
                    "category": "Call",
                    "children": [
                      {
                        "category": "ArrowFunction",
                        "children": [],
                        "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:570-656",
                        "kind": 219,
                        "label": "() => {} [20-23]",
                        "loc": {
                          "end": {
                            "column": 10,
                            "line": 23,
                          },
                          "start": {
                            "column": 28,
                            "line": 20,
                          },
                        },
                        "meta": {
                          "call": undefined,
                          "collapsed": "arrowFunction",
                          "originalCategory": "ArrowFunction",
                        },
                        "source": "(prev) => ({
          ...prev,
          [event.key as ModifierKey]: true,
        })",
                        "value": 1,
                      },
                    ],
                    "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:550-657",
                    "kind": 213,
                    "label": "setPressedModifiers [20-23]",
                    "loc": {
                      "end": {
                        "column": 11,
                        "line": 23,
                      },
                      "start": {
                        "column": 8,
                        "line": 20,
                      },
                    },
                    "source": "setPressedModifiers((prev) => ({
          ...prev,
          [event.key as ModifierKey]: true,
        }))",
                    "value": 2,
                  },
                ],
                "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:488-666",
                "kind": 245,
                "label": "if (keysToTrack.includes(event.key as ModifierKey))",
                "loc": {
                  "end": {
                    "column": 7,
                    "line": 24,
                  },
                  "start": {
                    "column": 6,
                    "line": 19,
                  },
                },
                "meta": {
                  "condition": "keysToTrack.includes(event.key as ModifierKey)",
                },
                "source": "if (keysToTrack.includes(event.key as ModifierKey)) {
        setPressedModifiers((prev) => ({
          ...prev,
          [event.key as ModifierKey]: true,
        }));
      }",
                "value": 3,
              },
            ],
            "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:454-672",
            "kind": 219,
            "label": "() => {} [18-25]",
            "loc": {
              "end": {
                "column": 5,
                "line": 25,
              },
              "start": {
                "column": 4,
                "line": 18,
              },
            },
            "meta": {
              "call": "setPressedModifiers [20-23]",
              "collapsed": "arrowFunction",
              "originalCategory": "ArrowFunction",
            },
            "source": "(event: KeyboardEvent) => {
      if (keysToTrack.includes(event.key as ModifierKey)) {
        setPressedModifiers((prev) => ({
          ...prev,
          [event.key as ModifierKey]: true,
        }));
      }
    }",
            "value": 4,
          },
        ],
        "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:437-695",
        "kind": 213,
        "label": "useCallback [17-27]",
        "loc": {
          "end": {
            "column": 3,
            "line": 27,
          },
          "start": {
            "column": 24,
            "line": 17,
          },
        },
        "meta": {
          "hookName": "useCallback",
        },
        "source": "useCallback(
    (event: KeyboardEvent) => {
      if (keysToTrack.includes(event.key as ModifierKey)) {
        setPressedModifiers((prev) => ({
          ...prev,
          [event.key as ModifierKey]: true,
        }));
      }
    },
    [keysToTrack]
  )",
        "value": 5,
      },
    ],
    "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:421-695",
    "kind": 260,
    "label": "handleKeyDown [17-27]",
    "loc": {
      "end": {
        "column": 3,
        "line": 27,
      },
      "start": {
        "column": 8,
        "line": 17,
      },
    },
    "meta": {
      "initializer": "useCallback(
    (event: KeyboardEvent) => {
      if (keysToTrack.includes(event.key as ModifierKey)) {
        setPressedModifiers((prev) => ({
          ...prev,
          [event.key as ModifierKey]: true,
        }));
      }
    },
    [keysToTrack]
  )",
    },
    "source": "handleKeyDown = useCallback(
    (event: KeyboardEvent) => {
      if (keysToTrack.includes(event.key as ModifierKey)) {
        setPressedModifiers((prev) => ({
          ...prev,
          [event.key as ModifierKey]: true,
        }));
      }
    },
    [keysToTrack]
  )",
    "value": 6,
  },
  {
    "category": "Import",
    "children": [],
    "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:15-72",
    "kind": 272,
    "label": "react [3]",
    "loc": {
      "end": {
        "column": 57,
        "line": 3,
      },
      "start": {
        "column": 0,
        "line": 3,
      },
    },
    "source": "import { useCallback, useEffect, useState } from "react";",
    "value": 1,
  },
  {
    "category": "ArrowFunction",
    "children": [
      {
        "category": "Variable",
        "children": [
          {
            "category": "ReactHook",
            "children": [],
            "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:371-410",
            "kind": 213,
            "label": "useState [13-15]",
            "loc": {
              "end": {
                "column": 3,
                "line": 15,
              },
              "start": {
                "column": 50,
                "line": 13,
              },
            },
            "meta": {
              "hookName": "useState",
            },
            "source": "useState<KeyModifiersState>(
    {}
  )",
            "value": 1,
          },
        ],
        "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:329-410",
        "kind": 260,
        "label": "[pressedModifiers, setPressedModifiers] [13-15]",
        "loc": {
          "end": {
            "column": 3,
            "line": 15,
          },
          "start": {
            "column": 8,
            "line": 13,
          },
        },
        "meta": {
          "initializer": "useState<KeyModifiersState>(
    {}
  )",
        },
        "source": "[pressedModifiers, setPressedModifiers] = useState<KeyModifiersState>(
    {}
  )",
        "value": 2,
      },
      {
        "category": "Variable",
        "children": [
          {
            "category": "ReactHook",
            "children": [
              {
                "category": "ArrowFunction",
                "children": [
                  {
                    "category": "IfClause",
                    "children": [
                      {
                        "category": "Call",
                        "children": [
                          {
                            "category": "ArrowFunction",
                            "children": [],
                            "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:570-656",
                            "kind": 219,
                            "label": "() => {} [20-23]",
                            "loc": {
                              "end": {
                                "column": 10,
                                "line": 23,
                              },
                              "start": {
                                "column": 28,
                                "line": 20,
                              },
                            },
                            "meta": {
                              "call": undefined,
                              "collapsed": "arrowFunction",
                              "originalCategory": "ArrowFunction",
                            },
                            "source": "(prev) => ({
          ...prev,
          [event.key as ModifierKey]: true,
        })",
                            "value": 1,
                          },
                        ],
                        "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:550-657",
                        "kind": 213,
                        "label": "setPressedModifiers [20-23]",
                        "loc": {
                          "end": {
                            "column": 11,
                            "line": 23,
                          },
                          "start": {
                            "column": 8,
                            "line": 20,
                          },
                        },
                        "source": "setPressedModifiers((prev) => ({
          ...prev,
          [event.key as ModifierKey]: true,
        }))",
                        "value": 2,
                      },
                    ],
                    "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:488-666",
                    "kind": 245,
                    "label": "if (keysToTrack.includes(event.key as ModifierKey))",
                    "loc": {
                      "end": {
                        "column": 7,
                        "line": 24,
                      },
                      "start": {
                        "column": 6,
                        "line": 19,
                      },
                    },
                    "meta": {
                      "condition": "keysToTrack.includes(event.key as ModifierKey)",
                    },
                    "source": "if (keysToTrack.includes(event.key as ModifierKey)) {
        setPressedModifiers((prev) => ({
          ...prev,
          [event.key as ModifierKey]: true,
        }));
      }",
                    "value": 3,
                  },
                ],
                "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:454-672",
                "kind": 219,
                "label": "() => {} [18-25]",
                "loc": {
                  "end": {
                    "column": 5,
                    "line": 25,
                  },
                  "start": {
                    "column": 4,
                    "line": 18,
                  },
                },
                "meta": {
                  "call": "setPressedModifiers [20-23]",
                  "collapsed": "arrowFunction",
                  "originalCategory": "ArrowFunction",
                },
                "source": "(event: KeyboardEvent) => {
      if (keysToTrack.includes(event.key as ModifierKey)) {
        setPressedModifiers((prev) => ({
          ...prev,
          [event.key as ModifierKey]: true,
        }));
      }
    }",
                "value": 4,
              },
            ],
            "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:437-695",
            "kind": 213,
            "label": "useCallback [17-27]",
            "loc": {
              "end": {
                "column": 3,
                "line": 27,
              },
              "start": {
                "column": 24,
                "line": 17,
              },
            },
            "meta": {
              "hookName": "useCallback",
            },
            "source": "useCallback(
    (event: KeyboardEvent) => {
      if (keysToTrack.includes(event.key as ModifierKey)) {
        setPressedModifiers((prev) => ({
          ...prev,
          [event.key as ModifierKey]: true,
        }));
      }
    },
    [keysToTrack]
  )",
            "value": 5,
          },
        ],
        "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:421-695",
        "kind": 260,
        "label": "handleKeyDown [17-27]",
        "loc": {
          "end": {
            "column": 3,
            "line": 27,
          },
          "start": {
            "column": 8,
            "line": 17,
          },
        },
        "meta": {
          "initializer": "useCallback(
    (event: KeyboardEvent) => {
      if (keysToTrack.includes(event.key as ModifierKey)) {
        setPressedModifiers((prev) => ({
          ...prev,
          [event.key as ModifierKey]: true,
        }));
      }
    },
    [keysToTrack]
  )",
        },
        "source": "handleKeyDown = useCallback(
    (event: KeyboardEvent) => {
      if (keysToTrack.includes(event.key as ModifierKey)) {
        setPressedModifiers((prev) => ({
          ...prev,
          [event.key as ModifierKey]: true,
        }));
      }
    },
    [keysToTrack]
  )",
        "value": 6,
      },
      {
        "category": "Variable",
        "children": [
          {
            "category": "ReactHook",
            "children": [
              {
                "category": "ArrowFunction",
                "children": [
                  {
                    "category": "IfClause",
                    "children": [
                      {
                        "category": "Call",
                        "children": [
                          {
                            "category": "ArrowFunction",
                            "children": [],
                            "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:853-940",
                            "kind": 219,
                            "label": "() => {} [32-35]",
                            "loc": {
                              "end": {
                                "column": 10,
                                "line": 35,
                              },
                              "start": {
                                "column": 28,
                                "line": 32,
                              },
                            },
                            "meta": {
                              "call": undefined,
                              "collapsed": "arrowFunction",
                              "originalCategory": "ArrowFunction",
                            },
                            "source": "(prev) => ({
          ...prev,
          [event.key as ModifierKey]: false,
        })",
                            "value": 1,
                          },
                        ],
                        "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:833-941",
                        "kind": 213,
                        "label": "setPressedModifiers [32-35]",
                        "loc": {
                          "end": {
                            "column": 11,
                            "line": 35,
                          },
                          "start": {
                            "column": 8,
                            "line": 32,
                          },
                        },
                        "source": "setPressedModifiers((prev) => ({
          ...prev,
          [event.key as ModifierKey]: false,
        }))",
                        "value": 2,
                      },
                    ],
                    "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:771-950",
                    "kind": 245,
                    "label": "if (keysToTrack.includes(event.key as ModifierKey))",
                    "loc": {
                      "end": {
                        "column": 7,
                        "line": 36,
                      },
                      "start": {
                        "column": 6,
                        "line": 31,
                      },
                    },
                    "meta": {
                      "condition": "keysToTrack.includes(event.key as ModifierKey)",
                    },
                    "source": "if (keysToTrack.includes(event.key as ModifierKey)) {
        setPressedModifiers((prev) => ({
          ...prev,
          [event.key as ModifierKey]: false,
        }));
      }",
                    "value": 3,
                  },
                ],
                "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:737-956",
                "kind": 219,
                "label": "() => {} [30-37]",
                "loc": {
                  "end": {
                    "column": 5,
                    "line": 37,
                  },
                  "start": {
                    "column": 4,
                    "line": 30,
                  },
                },
                "meta": {
                  "call": "setPressedModifiers [32-35]",
                  "collapsed": "arrowFunction",
                  "originalCategory": "ArrowFunction",
                },
                "source": "(event: KeyboardEvent) => {
      if (keysToTrack.includes(event.key as ModifierKey)) {
        setPressedModifiers((prev) => ({
          ...prev,
          [event.key as ModifierKey]: false,
        }));
      }
    }",
                "value": 4,
              },
            ],
            "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:720-979",
            "kind": 213,
            "label": "useCallback [29-39]",
            "loc": {
              "end": {
                "column": 3,
                "line": 39,
              },
              "start": {
                "column": 22,
                "line": 29,
              },
            },
            "meta": {
              "hookName": "useCallback",
            },
            "source": "useCallback(
    (event: KeyboardEvent) => {
      if (keysToTrack.includes(event.key as ModifierKey)) {
        setPressedModifiers((prev) => ({
          ...prev,
          [event.key as ModifierKey]: false,
        }));
      }
    },
    [keysToTrack]
  )",
            "value": 5,
          },
        ],
        "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:706-979",
        "kind": 260,
        "label": "handleKeyUp [29-39]",
        "loc": {
          "end": {
            "column": 3,
            "line": 39,
          },
          "start": {
            "column": 8,
            "line": 29,
          },
        },
        "meta": {
          "initializer": "useCallback(
    (event: KeyboardEvent) => {
      if (keysToTrack.includes(event.key as ModifierKey)) {
        setPressedModifiers((prev) => ({
          ...prev,
          [event.key as ModifierKey]: false,
        }));
      }
    },
    [keysToTrack]
  )",
        },
        "source": "handleKeyUp = useCallback(
    (event: KeyboardEvent) => {
      if (keysToTrack.includes(event.key as ModifierKey)) {
        setPressedModifiers((prev) => ({
          ...prev,
          [event.key as ModifierKey]: false,
        }));
      }
    },
    [keysToTrack]
  )",
        "value": 6,
      },
      {
        "category": "ReactHook",
        "children": [
          {
            "category": "ArrowFunction",
            "children": [
              {
                "category": "Call",
                "children": [],
                "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:1055-1104",
                "kind": 213,
                "label": "window.addEventListener [43]",
                "loc": {
                  "end": {
                    "column": 53,
                    "line": 43,
                  },
                  "start": {
                    "column": 4,
                    "line": 43,
                  },
                },
                "source": "window.addEventListener("keydown", handleKeyDown)",
                "value": 1,
              },
              {
                "category": "Call",
                "children": [],
                "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:1110-1155",
                "kind": 213,
                "label": "window.addEventListener [44]",
                "loc": {
                  "end": {
                    "column": 49,
                    "line": 44,
                  },
                  "start": {
                    "column": 4,
                    "line": 44,
                  },
                },
                "source": "window.addEventListener("keyup", handleKeyUp)",
                "value": 1,
              },
              {
                "category": "ReturnStatement",
                "children": [
                  {
                    "category": "ArrowFunction",
                    "children": [
                      {
                        "category": "Call",
                        "children": [],
                        "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:1219-1271",
                        "kind": 213,
                        "label": "window.removeEventListener [48]",
                        "loc": {
                          "end": {
                            "column": 58,
                            "line": 48,
                          },
                          "start": {
                            "column": 6,
                            "line": 48,
                          },
                        },
                        "source": "window.removeEventListener("keydown", handleKeyDown)",
                        "value": 1,
                      },
                      {
                        "category": "Call",
                        "children": [],
                        "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:1279-1327",
                        "kind": 213,
                        "label": "window.removeEventListener [49]",
                        "loc": {
                          "end": {
                            "column": 54,
                            "line": 49,
                          },
                          "start": {
                            "column": 6,
                            "line": 49,
                          },
                        },
                        "source": "window.removeEventListener("keyup", handleKeyUp)",
                        "value": 1,
                      },
                    ],
                    "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:1205-1334",
                    "kind": 219,
                    "label": "() => {} [47-50]",
                    "loc": {
                      "end": {
                        "column": 5,
                        "line": 50,
                      },
                      "start": {
                        "column": 11,
                        "line": 47,
                      },
                    },
                    "source": "() => {
      window.removeEventListener("keydown", handleKeyDown);
      window.removeEventListener("keyup", handleKeyUp);
    }",
                    "value": 3,
                  },
                ],
                "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:1198-1335",
                "kind": 253,
                "label": "return () => {
      window.removeEve... [47-50]",
                "loc": {
                  "end": {
                    "column": 6,
                    "line": 50,
                  },
                  "start": {
                    "column": 4,
                    "line": 47,
                  },
                },
                "source": "return () => {
      window.removeEventListener("keydown", handleKeyDown);
      window.removeEventListener("keyup", handleKeyUp);
    };",
                "value": 4,
              },
            ],
            "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:1043-1339",
            "kind": 219,
            "label": "() => {} [42-51]",
            "loc": {
              "end": {
                "column": 3,
                "line": 51,
              },
              "start": {
                "column": 12,
                "line": 42,
              },
            },
            "source": "() => {
    window.addEventListener("keydown", handleKeyDown);
    window.addEventListener("keyup", handleKeyUp);

    // Cleanup listeners on unmount
    return () => {
      window.removeEventListener("keydown", handleKeyDown);
      window.removeEventListener("keyup", handleKeyUp);
    };
  }",
            "value": 7,
          },
        ],
        "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:1033-1370",
        "kind": 213,
        "label": "useEffect [42-51]",
        "loc": {
          "end": {
            "column": 34,
            "line": 51,
          },
          "start": {
            "column": 2,
            "line": 42,
          },
        },
        "meta": {
          "hookName": "useEffect",
        },
        "source": "useEffect(() => {
    window.addEventListener("keydown", handleKeyDown);
    window.addEventListener("keyup", handleKeyUp);

    // Cleanup listeners on unmount
    return () => {
      window.removeEventListener("keydown", handleKeyDown);
      window.removeEventListener("keyup", handleKeyUp);
    };
  }, [handleKeyDown, handleKeyUp])",
        "value": 8,
      },
      {
        "category": "ReactHook",
        "children": [
          {
            "category": "ArrowFunction",
            "children": [
              {
                "category": "Variable",
                "children": [
                  {
                    "category": "ArrowFunction",
                    "children": [
                      {
                        "category": "IfClause",
                        "children": [
                          {
                            "category": "Variable",
                            "children": [
                              {
                                "category": "Call",
                                "children": [
                                  {
                                    "category": "ArrowFunction",
                                    "children": [
                                      {
                                        "category": "Assignment",
                                        "children": [],
                                        "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:1736-1752",
                                        "kind": 226,
                                        "label": "acc[key] = false [59]",
                                        "loc": {
                                          "end": {
                                            "column": 26,
                                            "line": 59,
                                          },
                                          "start": {
                                            "column": 10,
                                            "line": 59,
                                          },
                                        },
                                        "source": "acc[key] = false",
                                        "value": 1,
                                      },
                                      {
                                        "category": "ReturnStatement",
                                        "children": [],
                                        "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:1764-1775",
                                        "kind": 253,
                                        "label": "return acc [60]",
                                        "loc": {
                                          "end": {
                                            "column": 21,
                                            "line": 60,
                                          },
                                          "start": {
                                            "column": 10,
                                            "line": 60,
                                          },
                                        },
                                        "source": "return acc;",
                                        "value": 1,
                                      },
                                    ],
                                    "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:1710-1785",
                                    "kind": 219,
                                    "label": "() => {} [58-61]",
                                    "loc": {
                                      "end": {
                                        "column": 9,
                                        "line": 61,
                                      },
                                      "start": {
                                        "column": 46,
                                        "line": 58,
                                      },
                                    },
                                    "source": "(acc, key) => {
          acc[key] = false;
          return acc;
        }",
                                    "value": 3,
                                  },
                                ],
                                "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:1691-1811",
                                "kind": 213,
                                "label": "keysToTrack.reduce [58-61]",
                                "loc": {
                                  "end": {
                                    "column": 35,
                                    "line": 61,
                                  },
                                  "start": {
                                    "column": 27,
                                    "line": 58,
                                  },
                                },
                                "source": "keysToTrack.reduce((acc, key) => {
          acc[key] = false;
          return acc;
        }, {} as KeyModifiersState)",
                                "value": 4,
                              },
                            ],
                            "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:1678-1811",
                            "kind": 260,
                            "label": "resetState [58-61]",
                            "loc": {
                              "end": {
                                "column": 35,
                                "line": 61,
                              },
                              "start": {
                                "column": 14,
                                "line": 58,
                              },
                            },
                            "meta": {
                              "initializer": "keysToTrack.reduce((acc, key) => {
          acc[key] = false;
          return acc;
        }, {} as KeyModifiersState)",
                            },
                            "source": "resetState = keysToTrack.reduce((acc, key) => {
          acc[key] = false;
          return acc;
        }, {} as KeyModifiersState)",
                            "value": 5,
                          },
                          {
                            "category": "Call",
                            "children": [],
                            "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:1821-1852",
                            "kind": 213,
                            "label": "setPressedModifiers [62]",
                            "loc": {
                              "end": {
                                "column": 39,
                                "line": 62,
                              },
                              "start": {
                                "column": 8,
                                "line": 62,
                              },
                            },
                            "source": "setPressedModifiers(resetState)",
                            "value": 1,
                          },
                        ],
                        "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:1576-1861",
                        "kind": 245,
                        "label": "if (document.hidden)",
                        "loc": {
                          "end": {
                            "column": 7,
                            "line": 63,
                          },
                          "start": {
                            "column": 6,
                            "line": 56,
                          },
                        },
                        "meta": {
                          "condition": "document.hidden",
                        },
                        "source": "if (document.hidden) {
        // Reset all tracked keys to false when window is hidden
        const resetState = keysToTrack.reduce((acc, key) => {
          acc[key] = false;
          return acc;
        }, {} as KeyModifiersState);
        setPressedModifiers(resetState);
      }",
                        "value": 7,
                      },
                    ],
                    "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:1562-1867",
                    "kind": 219,
                    "label": "() => {} [55-64]",
                    "loc": {
                      "end": {
                        "column": 5,
                        "line": 64,
                      },
                      "start": {
                        "column": 35,
                        "line": 55,
                      },
                    },
                    "meta": {
                      "call": "keysToTrack.reduce [58-61]",
                      "collapsed": "arrowFunction",
                      "originalCategory": "ArrowFunction",
                    },
                    "source": "() => {
      if (document.hidden) {
        // Reset all tracked keys to false when window is hidden
        const resetState = keysToTrack.reduce((acc, key) => {
          acc[key] = false;
          return acc;
        }, {} as KeyModifiersState);
        setPressedModifiers(resetState);
      }
    }",
                    "value": 8,
                  },
                ],
                "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:1537-1867",
                "kind": 260,
                "label": "handleVisibilityChange [55-64]",
                "loc": {
                  "end": {
                    "column": 5,
                    "line": 64,
                  },
                  "start": {
                    "column": 10,
                    "line": 55,
                  },
                },
                "meta": {
                  "initializer": "() => {
      if (document.hidden) {
        // Reset all tracked keys to false when window is hidden
        const resetState = keysToTrack.reduce((acc, key) => {
          acc[key] = false;
          return acc;
        }, {} as KeyModifiersState);
        setPressedModifiers(resetState);
      }
    }",
                },
                "source": "handleVisibilityChange = () => {
      if (document.hidden) {
        // Reset all tracked keys to false when window is hidden
        const resetState = keysToTrack.reduce((acc, key) => {
          acc[key] = false;
          return acc;
        }, {} as KeyModifiersState);
        setPressedModifiers(resetState);
      }
    }",
                "value": 9,
              },
              {
                "category": "Call",
                "children": [],
                "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:1874-1943",
                "kind": 213,
                "label": "document.addEventListener [66]",
                "loc": {
                  "end": {
                    "column": 73,
                    "line": 66,
                  },
                  "start": {
                    "column": 4,
                    "line": 66,
                  },
                },
                "source": "document.addEventListener("visibilitychange", handleVisibilityChange)",
                "value": 1,
              },
              {
                "category": "ReturnStatement",
                "children": [
                  {
                    "category": "ArrowFunction",
                    "children": [
                      {
                        "category": "Call",
                        "children": [],
                        "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:1971-2043",
                        "kind": 213,
                        "label": "document.removeEventListener [69]",
                        "loc": {
                          "end": {
                            "column": 78,
                            "line": 69,
                          },
                          "start": {
                            "column": 6,
                            "line": 69,
                          },
                        },
                        "source": "document.removeEventListener("visibilitychange", handleVisibilityChange)",
                        "value": 1,
                      },
                    ],
                    "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:1957-2050",
                    "kind": 219,
                    "label": "() => {} [68-70]",
                    "loc": {
                      "end": {
                        "column": 5,
                        "line": 70,
                      },
                      "start": {
                        "column": 11,
                        "line": 68,
                      },
                    },
                    "meta": {
                      "call": "document.removeEventListener [69]",
                      "collapsed": "arrowFunction",
                      "originalCategory": "ArrowFunction",
                    },
                    "source": "() => {
      document.removeEventListener("visibilitychange", handleVisibilityChange);
    }",
                    "value": 2,
                  },
                ],
                "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:1950-2051",
                "kind": 253,
                "label": "return () => {
      document.removeE... [68-70]",
                "loc": {
                  "end": {
                    "column": 6,
                    "line": 70,
                  },
                  "start": {
                    "column": 4,
                    "line": 68,
                  },
                },
                "source": "return () => {
      document.removeEventListener("visibilitychange", handleVisibilityChange);
    };",
                "value": 3,
              },
            ],
            "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:1519-2055",
            "kind": 219,
            "label": "() => {} [54-71]",
            "loc": {
              "end": {
                "column": 3,
                "line": 71,
              },
              "start": {
                "column": 12,
                "line": 54,
              },
            },
            "source": "() => {
    const handleVisibilityChange = () => {
      if (document.hidden) {
        // Reset all tracked keys to false when window is hidden
        const resetState = keysToTrack.reduce((acc, key) => {
          acc[key] = false;
          return acc;
        }, {} as KeyModifiersState);
        setPressedModifiers(resetState);
      }
    };

    document.addEventListener("visibilitychange", handleVisibilityChange);

    return () => {
      document.removeEventListener("visibilitychange", handleVisibilityChange);
    };
  }",
            "value": 14,
          },
        ],
        "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:1509-2071",
        "kind": 213,
        "label": "useEffect [54-71]",
        "loc": {
          "end": {
            "column": 19,
            "line": 71,
          },
          "start": {
            "column": 2,
            "line": 54,
          },
        },
        "meta": {
          "hookName": "useEffect",
        },
        "source": "useEffect(() => {
    const handleVisibilityChange = () => {
      if (document.hidden) {
        // Reset all tracked keys to false when window is hidden
        const resetState = keysToTrack.reduce((acc, key) => {
          acc[key] = false;
          return acc;
        }, {} as KeyModifiersState);
        setPressedModifiers(resetState);
      }
    };

    document.addEventListener("visibilitychange", handleVisibilityChange);

    return () => {
      document.removeEventListener("visibilitychange", handleVisibilityChange);
    };
  }, [keysToTrack])",
        "value": 15,
      },
      {
        "category": "ReturnStatement",
        "children": [],
        "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:2076-2100",
        "kind": 253,
        "label": "return pressedModifiers [73]",
        "loc": {
          "end": {
            "column": 26,
            "line": 73,
          },
          "start": {
            "column": 2,
            "line": 73,
          },
        },
        "source": "return pressedModifiers;",
        "value": 1,
      },
    ],
    "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:264-2102",
    "kind": 219,
    "label": "() => {} [10-74]",
    "loc": {
      "end": {
        "column": 1,
        "line": 74,
      },
      "start": {
        "column": 31,
        "line": 10,
      },
    },
    "source": "(
  keysToTrack: ModifierKey[]
): KeyModifiersState => {
  const [pressedModifiers, setPressedModifiers] = useState<KeyModifiersState>(
    {}
  );

  const handleKeyDown = useCallback(
    (event: KeyboardEvent) => {
      if (keysToTrack.includes(event.key as ModifierKey)) {
        setPressedModifiers((prev) => ({
          ...prev,
          [event.key as ModifierKey]: true,
        }));
      }
    },
    [keysToTrack]
  );

  const handleKeyUp = useCallback(
    (event: KeyboardEvent) => {
      if (keysToTrack.includes(event.key as ModifierKey)) {
        setPressedModifiers((prev) => ({
          ...prev,
          [event.key as ModifierKey]: false,
        }));
      }
    },
    [keysToTrack]
  );

  // Effect to add/remove global event listeners
  useEffect(() => {
    window.addEventListener("keydown", handleKeyDown);
    window.addEventListener("keyup", handleKeyUp);

    // Cleanup listeners on unmount
    return () => {
      window.removeEventListener("keydown", handleKeyDown);
      window.removeEventListener("keyup", handleKeyUp);
    };
  }, [handleKeyDown, handleKeyUp]); // Re-attach if handlers change (due to keysToTrack changing)

  // Add visibility change listener to reset keys if window loses focus
  useEffect(() => {
    const handleVisibilityChange = () => {
      if (document.hidden) {
        // Reset all tracked keys to false when window is hidden
        const resetState = keysToTrack.reduce((acc, key) => {
          acc[key] = false;
          return acc;
        }, {} as KeyModifiersState);
        setPressedModifiers(resetState);
      }
    };

    document.addEventListener("visibilitychange", handleVisibilityChange);

    return () => {
      document.removeEventListener("visibilitychange", handleVisibilityChange);
    };
  }, [keysToTrack]);

  return pressedModifiers;
}",
    "value": 39,
  },
  {
    "category": "IfClause",
    "children": [
      {
        "category": "Call",
        "children": [
          {
            "category": "ArrowFunction",
            "children": [],
            "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:570-656",
            "kind": 219,
            "label": "() => {} [20-23]",
            "loc": {
              "end": {
                "column": 10,
                "line": 23,
              },
              "start": {
                "column": 28,
                "line": 20,
              },
            },
            "meta": {
              "call": undefined,
              "collapsed": "arrowFunction",
              "originalCategory": "ArrowFunction",
            },
            "source": "(prev) => ({
          ...prev,
          [event.key as ModifierKey]: true,
        })",
            "value": 1,
          },
        ],
        "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:550-657",
        "kind": 213,
        "label": "setPressedModifiers [20-23]",
        "loc": {
          "end": {
            "column": 11,
            "line": 23,
          },
          "start": {
            "column": 8,
            "line": 20,
          },
        },
        "source": "setPressedModifiers((prev) => ({
          ...prev,
          [event.key as ModifierKey]: true,
        }))",
        "value": 2,
      },
    ],
    "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:488-666",
    "kind": 245,
    "label": "if (keysToTrack.includes(event.key as ModifierKey))",
    "loc": {
      "end": {
        "column": 7,
        "line": 24,
      },
      "start": {
        "column": 6,
        "line": 19,
      },
    },
    "meta": {
      "condition": "keysToTrack.includes(event.key as ModifierKey)",
    },
    "source": "if (keysToTrack.includes(event.key as ModifierKey)) {
        setPressedModifiers((prev) => ({
          ...prev,
          [event.key as ModifierKey]: true,
        }));
      }",
    "value": 3,
  },
  {
    "category": "Variable",
    "children": [
      {
        "category": "ReactHook",
        "children": [],
        "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:371-410",
        "kind": 213,
        "label": "useState [13-15]",
        "loc": {
          "end": {
            "column": 3,
            "line": 15,
          },
          "start": {
            "column": 50,
            "line": 13,
          },
        },
        "meta": {
          "hookName": "useState",
        },
        "source": "useState<KeyModifiersState>(
    {}
  )",
        "value": 1,
      },
    ],
    "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:329-410",
    "kind": 260,
    "label": "[pressedModifiers, setPressedModifiers] [13-15]",
    "loc": {
      "end": {
        "column": 3,
        "line": 15,
      },
      "start": {
        "column": 8,
        "line": 13,
      },
    },
    "meta": {
      "initializer": "useState<KeyModifiersState>(
    {}
  )",
    },
    "source": "[pressedModifiers, setPressedModifiers] = useState<KeyModifiersState>(
    {}
  )",
    "value": 2,
  },
]
`;

exports[`buildSemanticReferenceGraph > should build a semantic graph 3`] = `
{
  "category": "Program",
  "children": [
    {
      "category": "Variable",
      "children": [
        {
          "category": "ArrowFunction",
          "children": [
            {
              "category": "Variable",
              "children": [],
              "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:329-410",
              "kind": 260,
              "label": "[pressedModifiers, setPressedModifiers] [13-15]",
              "loc": {
                "end": {
                  "column": 3,
                  "line": 15,
                },
                "start": {
                  "column": 8,
                  "line": 13,
                },
              },
              "meta": {
                "initializer": "useState<KeyModifiersState>(
    {}
  )",
              },
              "source": "[pressedModifiers, setPressedModifiers] = useState<KeyModifiersState>(
    {}
  )",
              "value": 2,
            },
            {
              "category": "Variable",
              "children": [
                {
                  "category": "ReactHook",
                  "children": [
                    {
                      "category": "ArrowFunction",
                      "children": [
                        {
                          "category": "IfClause",
                          "children": [],
                          "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:488-666",
                          "kind": 245,
                          "label": "if (keysToTrack.includes(event.key as ModifierKey))",
                          "loc": {
                            "end": {
                              "column": 7,
                              "line": 24,
                            },
                            "start": {
                              "column": 6,
                              "line": 19,
                            },
                          },
                          "meta": {
                            "condition": "keysToTrack.includes(event.key as ModifierKey)",
                          },
                          "source": "if (keysToTrack.includes(event.key as ModifierKey)) {
        setPressedModifiers((prev) => ({
          ...prev,
          [event.key as ModifierKey]: true,
        }));
      }",
                          "value": 3,
                        },
                      ],
                      "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:454-672",
                      "kind": 219,
                      "label": "() => {} [18-25]",
                      "loc": {
                        "end": {
                          "column": 5,
                          "line": 25,
                        },
                        "start": {
                          "column": 4,
                          "line": 18,
                        },
                      },
                      "meta": {
                        "call": "setPressedModifiers [20-23]",
                        "collapsed": "arrowFunction",
                        "originalCategory": "ArrowFunction",
                      },
                      "source": "(event: KeyboardEvent) => {
      if (keysToTrack.includes(event.key as ModifierKey)) {
        setPressedModifiers((prev) => ({
          ...prev,
          [event.key as ModifierKey]: true,
        }));
      }
    }",
                      "value": 4,
                    },
                  ],
                  "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:437-695",
                  "kind": 213,
                  "label": "useCallback [17-27]",
                  "loc": {
                    "end": {
                      "column": 3,
                      "line": 27,
                    },
                    "start": {
                      "column": 24,
                      "line": 17,
                    },
                  },
                  "meta": {
                    "hookName": "useCallback",
                  },
                  "source": "useCallback(
    (event: KeyboardEvent) => {
      if (keysToTrack.includes(event.key as ModifierKey)) {
        setPressedModifiers((prev) => ({
          ...prev,
          [event.key as ModifierKey]: true,
        }));
      }
    },
    [keysToTrack]
  )",
                  "value": 5,
                },
              ],
              "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:421-695",
              "kind": 260,
              "label": "handleKeyDown [17-27]",
              "loc": {
                "end": {
                  "column": 3,
                  "line": 27,
                },
                "start": {
                  "column": 8,
                  "line": 17,
                },
              },
              "meta": {
                "initializer": "useCallback(
    (event: KeyboardEvent) => {
      if (keysToTrack.includes(event.key as ModifierKey)) {
        setPressedModifiers((prev) => ({
          ...prev,
          [event.key as ModifierKey]: true,
        }));
      }
    },
    [keysToTrack]
  )",
              },
              "source": "handleKeyDown = useCallback(
    (event: KeyboardEvent) => {
      if (keysToTrack.includes(event.key as ModifierKey)) {
        setPressedModifiers((prev) => ({
          ...prev,
          [event.key as ModifierKey]: true,
        }));
      }
    },
    [keysToTrack]
  )",
              "value": 6,
            },
          ],
          "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:264-2102",
          "kind": 219,
          "label": "() => {} [10-74]",
          "loc": {
            "end": {
              "column": 1,
              "line": 74,
            },
            "start": {
              "column": 31,
              "line": 10,
            },
          },
          "source": "(
  keysToTrack: ModifierKey[]
): KeyModifiersState => {
  const [pressedModifiers, setPressedModifiers] = useState<KeyModifiersState>(
    {}
  );

  const handleKeyDown = useCallback(
    (event: KeyboardEvent) => {
      if (keysToTrack.includes(event.key as ModifierKey)) {
        setPressedModifiers((prev) => ({
          ...prev,
          [event.key as ModifierKey]: true,
        }));
      }
    },
    [keysToTrack]
  );

  const handleKeyUp = useCallback(
    (event: KeyboardEvent) => {
      if (keysToTrack.includes(event.key as ModifierKey)) {
        setPressedModifiers((prev) => ({
          ...prev,
          [event.key as ModifierKey]: false,
        }));
      }
    },
    [keysToTrack]
  );

  // Effect to add/remove global event listeners
  useEffect(() => {
    window.addEventListener("keydown", handleKeyDown);
    window.addEventListener("keyup", handleKeyUp);

    // Cleanup listeners on unmount
    return () => {
      window.removeEventListener("keydown", handleKeyDown);
      window.removeEventListener("keyup", handleKeyUp);
    };
  }, [handleKeyDown, handleKeyUp]); // Re-attach if handlers change (due to keysToTrack changing)

  // Add visibility change listener to reset keys if window loses focus
  useEffect(() => {
    const handleVisibilityChange = () => {
      if (document.hidden) {
        // Reset all tracked keys to false when window is hidden
        const resetState = keysToTrack.reduce((acc, key) => {
          acc[key] = false;
          return acc;
        }, {} as KeyModifiersState);
        setPressedModifiers(resetState);
      }
    };

    document.addEventListener("visibilitychange", handleVisibilityChange);

    return () => {
      document.removeEventListener("visibilitychange", handleVisibilityChange);
    };
  }, [keysToTrack]);

  return pressedModifiers;
}",
          "value": 39,
        },
      ],
      "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:246-2102",
      "kind": 260,
      "label": "useKeyModifiers [10-74]",
      "loc": {
        "end": {
          "column": 1,
          "line": 74,
        },
        "start": {
          "column": 13,
          "line": 10,
        },
      },
      "meta": {
        "initializer": "(
  keysToTrack: ModifierKey[]
): KeyModifiersState => {
  const [pressedModifiers, setPressedModifiers] = useState<KeyModifiersState>(
    {}
  );

  const handleKeyDown = useCallback(
    (event: KeyboardEvent) => {
      if (keysToTrack.includes(event.key as ModifierKey)) {
        setPressedModifiers((prev) => ({
          ...prev,
          [event.key as ModifierKey]: true,
        }));
      }
    },
    [keysToTrack]
  );

  const handleKeyUp = useCallback(
    (event: KeyboardEvent) => {
      if (keysToTrack.includes(event.key as ModifierKey)) {
        setPressedModifiers((prev) => ({
          ...prev,
          [event.key as ModifierKey]: false,
        }));
      }
    },
    [keysToTrack]
  );

  // Effect to add/remove global event listeners
  useEffect(() => {
    window.addEventListener("keydown", handleKeyDown);
    window.addEventListener("keyup", handleKeyUp);

    // Cleanup listeners on unmount
    return () => {
      window.removeEventListener("keydown", handleKeyDown);
      window.removeEventListener("keyup", handleKeyUp);
    };
  }, [handleKeyDown, handleKeyUp]); // Re-attach if handlers change (due to keysToTrack changing)

  // Add visibility change listener to reset keys if window loses focus
  useEffect(() => {
    const handleVisibilityChange = () => {
      if (document.hidden) {
        // Reset all tracked keys to false when window is hidden
        const resetState = keysToTrack.reduce((acc, key) => {
          acc[key] = false;
          return acc;
        }, {} as KeyModifiersState);
        setPressedModifiers(resetState);
      }
    };

    document.addEventListener("visibilitychange", handleVisibilityChange);

    return () => {
      document.removeEventListener("visibilitychange", handleVisibilityChange);
    };
  }, [keysToTrack]);

  return pressedModifiers;
}",
      },
      "source": "useKeyModifiers = (
  keysToTrack: ModifierKey[]
): KeyModifiersState => {
  const [pressedModifiers, setPressedModifiers] = useState<KeyModifiersState>(
    {}
  );

  const handleKeyDown = useCallback(
    (event: KeyboardEvent) => {
      if (keysToTrack.includes(event.key as ModifierKey)) {
        setPressedModifiers((prev) => ({
          ...prev,
          [event.key as ModifierKey]: true,
        }));
      }
    },
    [keysToTrack]
  );

  const handleKeyUp = useCallback(
    (event: KeyboardEvent) => {
      if (keysToTrack.includes(event.key as ModifierKey)) {
        setPressedModifiers((prev) => ({
          ...prev,
          [event.key as ModifierKey]: false,
        }));
      }
    },
    [keysToTrack]
  );

  // Effect to add/remove global event listeners
  useEffect(() => {
    window.addEventListener("keydown", handleKeyDown);
    window.addEventListener("keyup", handleKeyUp);

    // Cleanup listeners on unmount
    return () => {
      window.removeEventListener("keydown", handleKeyDown);
      window.removeEventListener("keyup", handleKeyUp);
    };
  }, [handleKeyDown, handleKeyUp]); // Re-attach if handlers change (due to keysToTrack changing)

  // Add visibility change listener to reset keys if window loses focus
  useEffect(() => {
    const handleVisibilityChange = () => {
      if (document.hidden) {
        // Reset all tracked keys to false when window is hidden
        const resetState = keysToTrack.reduce((acc, key) => {
          acc[key] = false;
          return acc;
        }, {} as KeyModifiersState);
        setPressedModifiers(resetState);
      }
    };

    document.addEventListener("visibilitychange", handleVisibilityChange);

    return () => {
      document.removeEventListener("visibilitychange", handleVisibilityChange);
    };
  }, [keysToTrack]);

  return pressedModifiers;
}",
      "value": 40,
    },
    {
      "category": "Import",
      "children": [],
      "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx:15-72",
      "kind": 272,
      "label": "react [3]",
      "loc": {
        "end": {
          "column": 57,
          "line": 3,
        },
        "start": {
          "column": 0,
          "line": 3,
        },
      },
      "source": "import { useCallback, useEffect, useState } from "react";",
      "value": 1,
    },
  ],
  "id": "/Users/byronwall/Projects/react-ts-viewer/src/__tests__/__fixtures__/useKeyModifiers.tsx",
  "kind": 307,
  "label": "useKeyModifiers.tsx",
  "loc": {
    "end": {
      "column": 3,
      "line": 74,
    },
    "start": {
      "column": 0,
      "line": 1,
    },
  },
  "source": ""use client";

import { useCallback, useEffect, useState } from "react";

type ModifierKey = "Control" | "Shift" | "Alt" | "Meta";

// Type for the hook's return value
type KeyModifiersState = Partial<Record<ModifierKey, boolean>>;

export const useKeyModifiers = (
  keysToTrack: ModifierKey[]
): KeyModifiersState => {
  const [pressedModifiers, setPressedModifiers] = useState<KeyModifiersState>(
    {}
  );

  const handleKeyDown = useCallback(
    (event: KeyboardEvent) => {
      if (keysToTrack.includes(event.key as ModifierKey)) {
        setPressedModifiers((prev) => ({
          ...prev,
          [event.key as ModifierKey]: true,
        }));
      }
    },
    [keysToTrack]
  );

  const handleKeyUp = useCallback(
    (event: KeyboardEvent) => {
      if (keysToTrack.includes(event.key as ModifierKey)) {
        setPressedModifiers((prev) => ({
          ...prev,
          [event.key as ModifierKey]: false,
        }));
      }
    },
    [keysToTrack]
  );

  // Effect to add/remove global event listeners
  useEffect(() => {
    window.addEventListener("keydown", handleKeyDown);
    window.addEventListener("keyup", handleKeyUp);

    // Cleanup listeners on unmount
    return () => {
      window.removeEventListener("keydown", handleKeyDown);
      window.removeEventListener("keyup", handleKeyUp);
    };
  }, [handleKeyDown, handleKeyUp]); // Re-attach if handlers change (due to keysToTrack changing)

  // Add visibility change listener to reset keys if window loses focus
  useEffect(() => {
    const handleVisibilityChange = () => {
      if (document.hidden) {
        // Reset all tracked keys to false when window is hidden
        const resetState = keysToTrack.reduce((acc, key) => {
          acc[key] = false;
          return acc;
        }, {} as KeyModifiersState);
        setPressedModifiers(resetState);
      }
    };

    document.addEventListener("visibilitychange", handleVisibilityChange);

    return () => {
      document.removeEventListener("visibilitychange", handleVisibilityChange);
    };
  }, [keysToTrack]);

  return pressedModifiers;
}; ",
  "value": 45,
}
`;
